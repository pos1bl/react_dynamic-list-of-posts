{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/api.ts","index.tsx"],"names":["PostsList","posts","setSelectedPost","selectedPost","isWriting","setIsWriting","handleClick","post","className","map","id","title","type","onClick","Loader","NewCommentForm","addComment","postId","useState","isLoading","setIsLoading","name","setName","email","setEmail","text","setText","nameError","setNameError","emailError","setEmailError","textError","setTextError","onSubmit","event","preventDefault","trim","body","finally","handleSubmit","htmlFor","placeholder","value","onChange","target","classNames","PostDetails","comments","isError","validateComments","deleteComment","length","comment","href","UserSelector","users","selectedUser","setSelectedUser","isPressed","setIsPressed","prevValue","role","user","handleSelect","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","App","setUsers","setPosts","setComments","setIsError","isCmntsLoading","setIsCmntsLoading","isCmntsError","setIsCmntsError","useEffect","userId","catch","validatePosts","prevComments","filter","maxId","Math","max","newComment","prevCmnts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62aa68c8.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setSelectedPost: (post: Post | null) => void;\n  selectedPost: Post | null;\n  isWriting: boolean;\n  setIsWriting: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectedPost,\n  selectedPost,\n  isWriting,\n  setIsWriting,\n}) => {\n  const handleClick = (post: Post | null) => {\n    if (isWriting) {\n      setIsWriting(false);\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">{title}</td>\n                <td className=\"has-text-right is-vcentered\">\n                  {selectedPost?.id === id\n                    ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link\"\n                        onClick={() => handleClick(null)}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-light\"\n                        onClick={() => handleClick(post)}\n                      >\n                        Open\n                      </button>\n                    )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  addComment: ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => Promise<void>;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addComment,\n  postId,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [textError, setTextError] = useState(false);\n\n  const handleNameChange = (value: string) => {\n    setName(value);\n    setNameError(false);\n  };\n\n  const handleEmailChange = (value: string) => {\n    setEmail(value);\n    setEmailError(false);\n  };\n\n  const handleBodyChange = (value: string) => {\n    setText(value);\n    setTextError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setNameError(true);\n    }\n\n    if (!email.trim()) {\n      setEmailError(true);\n    }\n\n    if (!text.trim()) {\n      setTextError(true);\n    }\n\n    if (!name.trim() || !email.trim() || !text.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    addComment({\n      postId,\n      name,\n      email,\n      body: text,\n    })\n      .finally(() => {\n        setIsLoading(false);\n        setText('');\n      });\n  };\n\n  const clearErrors = () => {\n    setEmailError(false);\n    setNameError(false);\n    setTextError(false);\n  };\n\n  const handleClear = () => {\n    clearErrors();\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => handleSubmit(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            onChange={(event) => handleNameChange(event.target.value)}\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            onChange={(event) => handleEmailChange(event.target.value)}\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={text}\n            onChange={(event) => handleBodyChange(event.target.value)}\n            className={classNames(\n              'textarea',\n              { 'is-danger': textError },\n            )}\n          />\n        </div>\n\n        {textError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  comments: Comment[];\n  isLoading: boolean;\n  isError: boolean;\n  validateComments: boolean;\n  deleteComment: (id: number) => void;\n  isWriting: boolean;\n  setIsWriting: (value: boolean) => void;\n  addComment: ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => Promise<void>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isLoading,\n  isError,\n  validateComments,\n  deleteComment,\n  isWriting,\n  setIsWriting,\n  addComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {validateComments && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {validateComments && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => {\n                const {\n                  email,\n                  name,\n                  body,\n                  id,\n                } = comment;\n\n                return (\n                  <article className=\"message is-small\" data-cy=\"Comment\">\n                    <div className=\"message-header\">\n                      <a href={email} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteComment(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!isWriting && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriting(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriting && (\n          <NewCommentForm\n            addComment={addComment}\n            postId={selectedPost.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isPressed, setIsPressed] = useState(false);\n\n  const handleSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsPressed(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsPressed(prevValue => !prevValue)}\n        >\n          {selectedUser ? <span>{selectedUser.name}</span>\n            : <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isPressed && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n        >\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                onClick={() => handleSelect(user)}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser?.id === user.id },\n                )}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport * as postService from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isCmntsLoading, setIsCmntsLoading] = useState(false);\n  const [isCmntsError, setIsCmntsError] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n\n  useEffect(() => {\n    postService.getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      setIsLoading(true);\n\n      postService.getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsCmntsLoading(true);\n\n      postService.getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setIsCmntsError(true))\n        .finally(() => setIsCmntsLoading(false));\n    }\n  }, [selectedPost]);\n\n  const deleteComment = (id: number) => {\n    setComments(prevComments => prevComments\n      .filter(comment => comment.id !== id));\n    postService.deleteComment(id);\n  };\n\n  const addComment = ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => {\n    const maxId = Math.max(0, ...comments.map(comment => comment.id));\n\n    const id = maxId + 1;\n\n    return postService.createComment({\n      id,\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then(newComment => setComments(prevCmnts => [...prevCmnts, newComment]))\n      .catch(() => (setIsCmntsError(true)));\n  };\n\n  const validatePosts = selectedUser && !isLoading && !isError;\n  const validateComments = !isCmntsLoading && !isCmntsError;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {validatePosts && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {validatePosts && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                    isWriting={isWriting}\n                    setIsWriting={setIsWriting}\n                  />\n                )}\n\n                {isError && !isLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isLoading={isCmntsLoading}\n                  isError={isCmntsError}\n                  validateComments={validateComments}\n                  deleteComment={deleteComment}\n                  isWriting={isWriting}\n                  setIsWriting={setIsWriting}\n                  addComment={addComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}